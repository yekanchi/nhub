{
	"name": "requests",
	"versions": {
		"0.3.0": {
			"name": "requests",
			"version": "0.3.0",
			"description": "An streaming XHR abstraction that works in browsers and node.js",
			"main": "index.js",
			"scripts": {
				"100%": "istanbul check-coverage --statements 100 --functions 100 --lines 100 --branches 100",
				"wd": "node test/index.js --wd",
				"test": "node test/index.js",
				"static": "node test/static.js",
				"node": "mocha test/requests.test.js",
				"watch": "mocha --watch ./test/requests.test.js",
				"all": "npm run test && npm run node",
				"coverage": "istanbul cover ./node_modules/.bin/_mocha -- test/requests.test.js",
				"test-node": "istanbul cover node_modules/.bin/_mocha --report lcovonly -- test/requests.test.js",
				"compile": "mkdir -p dist && browserify browser.js -o dist/requests.js --standalone Requests",
				"pre-publish": "npm run compile",
				"start": "node test/development.js"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/unshiftio/requests.git"
			},
			"keywords": [
				"request",
				"xhr",
				"requests",
				"http",
				"xml",
				"xmlhttp",
				"xmlhttprequest"
			],
			"author": {
				"name": "Arnout Kazemier"
			},
			"license": "MIT",
			"bugs": {
				"url": "https://github.com/unshiftio/requests/issues"
			},
			"homepage": "https://github.com/unshiftio/requests",
			"dependencies": {
				"axo": "0.0.x",
				"eventemitter3": "~4.0.0",
				"extendible": "0.1.x",
				"hang": "1.0.x",
				"loads": "0.0.x",
				"node-http-xhr": "~1.3.0",
				"xhr-send": "1.0.x"
			},
			"devDependencies": {
				"argh": "0.1.x",
				"assume": "~2.0.0",
				"async-each": "~1.0.1",
				"browserify": "^16.0.0",
				"http-proxy": "~1.17.0",
				"istanbul": "~0.4.5",
				"mocha": "~3.5.0",
				"mochify": "~2.18.1",
				"pre-commit": "~1.2.0",
				"setheader": "~1.0.0"
			},
			"testling": {
				"files": "test/*.browser.js",
				"harness": "mocha-bdd",
				"browsers": [
					"ie/6..latest",
					"chrome/22..latest",
					"firefox/16..latest",
					"safari/latest",
					"opera/11.0..latest",
					"iphone/latest",
					"ipad/latest",
					"android-browser/latest"
				]
			},
			"_resolved": "",
			"_integrity": "",
			"_from": "file:requests-0.3.0.tgz",
			"readmeFilename": "README.md",
			"_id": "requests@0.3.0",
			"_nodeVersion": "14.8.0",
			"_npmVersion": "6.14.7",
			"dist": {
				"integrity": "sha512-1B6nkiHjC1O1cSgFhEwkc+xd8vuj04h7xSmCg5yI8nmhCIKbPkX47od8erQ2pokBt5qxUO7dwP4jplXD6k6ISA==",
				"shasum": "484913c1648beac3092a2324d8bc296a4bd76c5d",
				"tarball": "http://localhost:2222/requests/-/requests-0.3.0.tgz"
			},
			"contributors": []
		}
	},
	"time": {
		"modified": "2020-09-02T10:07:33.259Z",
		"created": "2020-09-02T10:07:33.259Z",
		"0.3.0": "2020-09-02T10:07:33.259Z"
	},
	"users": {},
	"dist-tags": {
		"latest": "0.3.0"
	},
	"_uplinks": {},
	"_distfiles": {},
	"_attachments": {
		"requests-0.3.0.tgz": {
			"shasum": "484913c1648beac3092a2324d8bc296a4bd76c5d",
			"version": "0.3.0"
		}
	},
	"_rev": "3-c09d13b08a87eb9d",
	"_id": "requests",
	"readme": "# requests\n\n[![Made by unshift][made-by]](http://unshift.io)[![Version npm][version]](http://browsenpm.org/package/requests)[![Build Status][build]](https://travis-ci.org/unshiftio/requests)[![Dependencies][david]](https://david-dm.org/unshiftio/requests)[![Coverage Status][cover]](https://coveralls.io/r/unshiftio/requests?branch=master)[![IRC channel][irc]](http://webchat.freenode.net/?channels=unshift)\n\n[made-by]: https://img.shields.io/badge/made%20by-unshift-00ffcc.svg?style=flat-square\n[version]: https://img.shields.io/npm/v/requests.svg?style=flat-square\n[build]: https://img.shields.io/travis/unshiftio/requests/master.svg?style=flat-square\n[david]: https://img.shields.io/david/unshiftio/requests.svg?style=flat-square\n[cover]: https://img.shields.io/coveralls/unshiftio/requests/master.svg?style=flat-square\n[irc]: https://img.shields.io/badge/IRC-irc.freenode.net%23unshift-00a8ff.svg?style=flat-square\n\nRequests is a small library that implements fully and true streaming XHR for\nbrowsers that support these methods. It uses a variety of proprietary\n`responseType` properties to force a streaming connection, even for binary data.\nFor browsers that don't support this we will simply fallback to a regular but\n**async** XHR 1/2 request or ActiveXObject in even older deprecated browsers.\n\n- Internet Explorer >= 10: `ms-stream`\n- FireFox >= 9: `moz-chunked`\n- FireFox < 20: `multipart`\n\nThis module comes with build-in protection against ActiveX blocking that is\nfrequently used in firewalls & virus scanners.\n\n## Installation\n\nThe module is released in the public npm registry and can be installed using:\n\n```\nnpm install --save requests\n```\n\n## Usage\n\nThe API is a mix between the Fetch API, mixed with EventEmitter API for the\nevent handling.\n\n```js\n'use strict';\n\nvar requests = require('requests');\n```\n\nNow that we've included the library we can start making requests. The exported\nmethod accepts 2 arguments:\n\n- **url** Required URL that you want to have requested.\n- **options** Optional object with additional configuration options:\n  - **streaming** Should we use streaming API's to fetch the data, defaults to\n  `false`.\n  - **method** The HTTP method that should be used to get the contents, defaults\n  to `GET`.\n  - **mode** The request mode, defaults to `cors`\n  - **headers** Object with header name/value that we need to send to the server.\n  - **timeout** The timeout in ms before we should abort the request.\n  - **manual** Manually `open` the request, defaults to `false`.\n\n```js\nrequests('https://google.com/foo/bar', { streaming })\n.on('data', function (chunk) {\n  console.log(chunk)\n})\n.on('end', function (err) {\n  if (err) return console.log('connection closed due to errors', err);\n\n  console.log('end');\n});\n```\n\n## Events\n\nIn the example above you can see the that we're listing to various of events.\nThe following events are emitted:\n\n- `data` A new chunk of data has been received. It can be a small chunk but also\n  the full response depending on the environment it's loaded in.\n- `destroy` The request instance has been fully destroyed.\n- `error` An error occurred while requesting the given URL.\n- `end` Done with requesting the URL. An error argument can be supplied if the\n  connection was closed due to an error.\n- `before` Emitted before we send the actual request.\n- `send` Emitted after we've succesfully started the sending of the data.\n\n### requests#destroy\n\nDestroy the running XHR request and release all the references that the\n`requests` instance holds. It returns a boolean as indication of a successful\ndestruction.\n\n```js\nrequests.destroy();\n```\n\n### Requests.requested\n\nThe total amount of requests that we've made in this library. It also serves as\nunique id for each request that we store in `.active`.\n\n### Requests.active\n\nAn object that contains all running and active requests. Namespaced under\n`request.requested` id and the requests instance.\n\n## License\n\nMIT\n"
}